
R version 3.0.3 (2014-03-06) -- "Warm Puppy"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SensMixed"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('SensMixed')
Loading required package: lmerTest
Loading required package: Matrix
Loading required package: lme4
Loading required package: Rcpp
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009

Attaching package: 'lmerTest'

The following object is masked from 'package:lme4':

    lmer

The following object is masked from 'package:stats':

    step

Warning: replacing previous import by 'lsmeans::lsmeans' when loading 'SensMixed'
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("consmixed")
> ### * consmixed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: consmixed
> ### Title: Automated model selection process for the Consumer data
> ### Aliases: consmixed
> 
> ### ** Examples
> 
> library(SensMixed)
> data(ham)
> 
> consmixed(response="Informed.liking", 
+ Prod_effects= c("Product","Information"), 
+ Cons_effects=c("Gender","Age"), Cons = "Consumer", data =ham, structure=1)

Random effects:
                     Chi.sq Chi.DF elim.num p.value
Information:Consumer   1.11      1        1  0.2916
Product:Consumer     162.65      1     kept  <1e-07
Consumer               2.99      1     kept  0.0836

Fixed effects:
             Sum Sq Mean Sq NumDF  DenDF F.value Pr(>F)
Product     19.3466  6.4489     3 239.98  3.8291 0.0105
Information  6.5201  6.5201     1 322.98  3.8714 0.0500
Gender       1.4618  1.4618     1  77.98  0.8777 0.3517
Age          0.0254  0.0254     1  77.98  0.0151 0.9026

Least squares means:
               Product Information Gender Estimate Standard Error  DF t-value
Product  1           1          NA     NA    5.807          0.233 309    24.9
Product  2           2          NA     NA    5.103          0.233 309    21.9
Product  3           3          NA     NA    6.091          0.233 309    26.2
Product  4           4          NA     NA    5.924          0.233 309    25.4
Information  1      NA           1     NA    5.631          0.141 103    40.0
Information  2      NA           2     NA    5.832          0.141 103    41.5
Gender  1           NA          NA      1    5.857          0.186  78    31.4
Gender  2           NA          NA      2    5.606          0.189  78    29.7
               Lower CI Upper CI p-value    
Product  1         5.35     6.27  <2e-16 ***
Product  2         4.65     5.56  <2e-16 ***
Product  3         5.63     6.55  <2e-16 ***
Product  4         5.47     6.38  <2e-16 ***
Information  1     5.35     5.91  <2e-16 ***
Information  2     5.55     6.11  <2e-16 ***
Gender  1          5.49     6.23  <2e-16 ***
Gender  2          5.23     5.98  <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

 Differences of LSMEANS:
                Estimate Standard Error    DF t-value Lower CI Upper CI p-value
Product 1-2          0.7          0.314 240.0    2.24   0.0849    1.323   0.026
Product 1-3         -0.3          0.314 240.0   -0.90  -0.9027    0.335   0.367
Product 1-4         -0.1          0.314 240.0   -0.37  -0.7361    0.501   0.709
Product 2-3         -1.0          0.314 240.0   -3.14  -1.6064   -0.369   0.002
Product 2-4         -0.8          0.314 240.0   -2.61  -1.4398   -0.202   0.009
Product 3-4          0.2          0.314 240.0    0.53  -0.4521    0.785   0.596
Information 1-2     -0.2          0.102 323.0   -1.97  -0.4012    0.000   0.050
Gender 1-2           0.3          0.268  78.0    0.94  -0.2825    0.785   0.352
                  
Product 1-2     * 
Product 1-3       
Product 1-4       
Product 2-3     **
Product 2-4     **
Product 3-4       
Information 1-2 * 
Gender 1-2        
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Final model:
lme4::lmer(formula = Informed.liking ~ Product + (1 | Product:Consumer) + 
    Information + Gender + Age + (1 | Consumer), data = data, 
    REML = reml, contrasts = l.lmerTest.private.contrast)
> 
> 
> 
> 
> cleanEx()
> nameEx("convertToFactors")
> ### * convertToFactors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convertToFactors
> ### Title: converts variables of the data frame to factors
> ### Aliases: convertToFactors
> 
> ### ** Examples
> 
> library(SensMixed)
> data(carrots)
> str(carrots)
'data.frame':	1236 obs. of  14 variables:
 $ Consumer  : Factor w/ 103 levels "168","169","171",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Frequency : int  1 1 1 1 1 1 1 1 1 1 ...
 $ Gender    : int  2 2 2 2 2 2 2 2 2 2 ...
 $ Age       : Factor w/ 4 levels "1","2","3","4": 4 4 4 4 4 4 4 4 4 4 ...
 $ Homesize  : Factor w/ 2 levels "1","3": 2 2 2 2 2 2 2 2 2 2 ...
 $ Work      : int  7 7 7 7 7 7 7 7 7 7 ...
 $ Income    : int  2 2 2 2 2 2 2 2 2 2 ...
 $ Preference: int  4 5 4 7 5 6 5 6 5 6 ...
 $ Sweetness : int  2 5 2 6 4 6 3 6 4 4 ...
 $ BITTER    : Factor w/ 7 levels "1","2","3","4",..: 4 2 2 2 2 2 2 2 1 2 ...
 $ Crisp     : int  2 6 3 6 4 5 5 6 5 4 ...
 $ sens1     : num  6.683 6.441 -1.948 0.481 2.181 ...
 $ sens2     : num  -2.54 3.54 -4.29 -1.33 -4.67 ...
 $ product   : Factor w/ 12 levels "Bolero_E","Bolero_L",..: 1 2 3 4 5 6 7 8 9 10 ...
> 
> carrots <- convertToFactors(carrots, c("Consumer", "Income", "Homesize"))
> 
> str(carrots)
'data.frame':	1236 obs. of  14 variables:
 $ Consumer  : Factor w/ 103 levels "168","169","171",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Frequency : int  1 1 1 1 1 1 1 1 1 1 ...
 $ Gender    : int  2 2 2 2 2 2 2 2 2 2 ...
 $ Age       : Factor w/ 4 levels "1","2","3","4": 4 4 4 4 4 4 4 4 4 4 ...
 $ Homesize  : Factor w/ 2 levels "1","3": 2 2 2 2 2 2 2 2 2 2 ...
 $ Work      : int  7 7 7 7 7 7 7 7 7 7 ...
 $ Income    : Factor w/ 4 levels "1","2","3","4": 2 2 2 2 2 2 2 2 2 2 ...
 $ Preference: int  4 5 4 7 5 6 5 6 5 6 ...
 $ Sweetness : int  2 5 2 6 4 6 3 6 4 4 ...
 $ BITTER    : Factor w/ 7 levels "1","2","3","4",..: 4 2 2 2 2 2 2 2 1 2 ...
 $ Crisp     : int  2 6 3 6 4 5 5 6 5 4 ...
 $ sens1     : num  6.683 6.441 -1.948 0.481 2.181 ...
 $ sens2     : num  -2.54 3.54 -4.29 -1.33 -4.67 ...
 $ product   : Factor w/ 12 levels "Bolero_E","Bolero_L",..: 1 2 3 4 5 6 7 8 9 10 ...
> 
> 
> 
> cleanEx()
> nameEx("sensmixed")
> ### * sensmixed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sensmixed
> ### Title: Automated model selection process for each attribute of sensory
> ###   data
> ### Aliases: sensmixed
> 
> ### ** Examples
> 
> 
> 
> #import SensMixed package
> library(SensMixed)
> 
> #import TVbo data from lmerTest package
> data(TVbo)
> 
> #run automated selection process
> system.time(res <- sensmixed(c("Coloursaturation", "Colourbalance"),
+ Prod_effects = c("TVset", "Picture"), replication="Repeat", 
+ individual="Assessor", data=TVbo, MAM=TRUE))
Loading required package: pbkrtest
Loading required package: MASS
Loading required package: parallel
   user  system elapsed 
   9.54    0.04    9.58 
> 
> system.time(res_paral <- sensmixed(names(TVbo)[5:ncol(TVbo)],
+ Prod_effects = c("TVset", "Picture"), replication="Repeat", 
+ individual="Assessor", data=TVbo, error_structure="3-WAY"))
   user  system elapsed 
   0.49    0.04   86.61 
> 
> 
> ## run MAManalysis function
> res_MAM <- sensmixed(c("Coloursaturation", "Colourbalance"),
+                  Prod_effects=c("TVset"), replication="Repeat", 
+                   individual="Assessor", data=TVbo, MAM_PER=TRUE)
> ## print is not yet implemented
> ## get anova part
> res_MAM[[3]][,,1]
                 SS     MS  DF     F   Pval
Assessor      54.66   7.81   7  1.21 0.3571
Product      221.51 110.76   2 16.11 0.0024
Scaling       41.89   5.98   7  0.87 0.5703
Disagreement  48.13   6.88   7  7.15 0.0000
Error        161.67   0.96 168    NA     NA
> 
> ## compare with the general implementation
> res <- sensmixed(c("Coloursaturation", "Colourbalance"),
+                   Prod_effects=c("TVset"), 
+                   individual="Assessor", data=TVbo, MAM=TRUE, 
+                   reduce.random=FALSE)
> res$fixed      
$Fval
        Coloursaturation Colourbalance
TVset          16.108508     5.5827960
Scaling         0.870353     0.9159601

$pvalueF
        Coloursaturation Colourbalance
TVset        0.002403462    0.03552449
Scaling      0.570327146    0.54461144

> 
> ## Not run: 
> ##D #plot F and Chi square values
> ##D #plot(result)
> ## End(Not run)
> 
> ## Not run: 
> ##D result <- sensmixed(names(TVbo)[5:ncol(TVbo)],
> ##D Prod_effects=c("TVset", "Picture"),
> ##D replication="Repeat", individual="Assessor", data=TVbo)
> ##D 
> ##D plot(result)
> ##D 
> ##D 
> ##D 
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  19.61 0.39 106.22 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
